{"ast":null,"code":"import * as C from '../types';\nimport { get } from '../api';\nexport const getProjectAll = () => async dispatch => {\n  dispatch({\n    type: C.FETCH_PROJECT_ALL\n  });\n\n  try {\n    const {\n      data\n    } = await get('/project/getAll');\n    dispatch({\n      type: C.FINISHED_FETCH_PROJECT_ALL,\n      data\n    });\n  } catch (error) {\n    dispatch({\n      type: C.ERROR_FETCH_PROJECT_ALL,\n      error\n    });\n  }\n};\nexport const getProjectMember = memberId => async dispatch => {\n  dispatch({\n    type: C.FETCH_PROJECT_MEMBER\n  });\n\n  try {\n    const {\n      data\n    } = await get(`/project/getProjectsOf_${memberId}`);\n    dispatch({\n      type: C.FINISHED_FETCH_PROJECT_MEMBER,\n      data\n    });\n  } catch (error) {\n    dispatch({\n      type: C.ERROR_FETCH_PROJECT_MEMBER,\n      error\n    });\n  }\n};\nexport const getProject = projectId => async dispatch => {\n  dispatch({\n    type: C.FETCH_PROJECT\n  });\n\n  try {\n    const {\n      data\n    } = await get(`project/get_${projectId}`);\n    dispatch({\n      type: C.FINISHED_FETCH_PROJECT,\n      data\n    });\n  } catch (error) {\n    dispatch({\n      type: C.ERROR_FETCH_PROJECT,\n      error\n    });\n  }\n};","map":{"version":3,"sources":["/Users/ainkhm/Desktop/tga_test/src/actions/project.js"],"names":["C","get","getProjectAll","dispatch","type","FETCH_PROJECT_ALL","data","FINISHED_FETCH_PROJECT_ALL","error","ERROR_FETCH_PROJECT_ALL","getProjectMember","memberId","FETCH_PROJECT_MEMBER","FINISHED_FETCH_PROJECT_MEMBER","ERROR_FETCH_PROJECT_MEMBER","getProject","projectId","FETCH_PROJECT","FINISHED_FETCH_PROJECT","ERROR_FETCH_PROJECT"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,UAAnB;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEJ,CAAC,CAACK;AADA,GAAD,CAAR;;AAGA,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAC,iBAAD,CAA1B;AACAE,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACO,0BADA;AAERD,MAAAA;AAFQ,KAAD,CAAR;AAIA,GAND,CAME,OAAOE,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACS,uBADA;AAERD,MAAAA;AAFQ,KAAD,CAAR;AAIA;AACD,CAhBM;AAkBP,OAAO,MAAME,gBAAgB,GAAIC,QAAD,IAAc,MAAOR,QAAP,IAAoB;AACjEA,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEJ,CAAC,CAACY;AADA,GAAD,CAAR;;AAGA,MAAI;AACH,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAE,0BAAyBU,QAAS,EAApC,CAA1B;AACAR,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACa,6BADA;AAERP,MAAAA;AAFQ,KAAD,CAAR;AAIA,GAND,CAME,OAAOE,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACc,0BADA;AAERN,MAAAA;AAFQ,KAAD,CAAR;AAIA;AACD,CAhBM;AAkBP,OAAO,MAAMO,UAAU,GAAIC,SAAD,IAAe,MAAOb,QAAP,IAAoB;AAC5DA,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEJ,CAAC,CAACiB;AADA,GAAD,CAAR;;AAGA,MAAI;AACH,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAE,eAAce,SAAU,EAA1B,CAA1B;AACAb,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACkB,sBADA;AAERZ,MAAAA;AAFQ,KAAD,CAAR;AAIA,GAND,CAME,OAAOE,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEJ,CAAC,CAACmB,mBADA;AAERX,MAAAA;AAFQ,KAAD,CAAR;AAIA;AACD,CAhBM","sourcesContent":["import * as C from '../types';\nimport { get } from '../api';\n\nexport const getProjectAll = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_PROJECT_ALL,\n\t});\n\ttry {\n\t\tconst { data } = await get('/project/getAll');\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_PROJECT_ALL,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_PROJECT_ALL,\n\t\t\terror,\n\t\t});\n\t}\n};\n\nexport const getProjectMember = (memberId) => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_PROJECT_MEMBER,\n\t});\n\ttry {\n\t\tconst { data } = await get(`/project/getProjectsOf_${memberId}`);\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_PROJECT_MEMBER,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_PROJECT_MEMBER,\n\t\t\terror,\n\t\t});\n\t}\n};\n\nexport const getProject = (projectId) => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_PROJECT,\n\t});\n\ttry {\n\t\tconst { data } = await get(`project/get_${projectId}`);\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_PROJECT,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_PROJECT,\n\t\t\terror,\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}