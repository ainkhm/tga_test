{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ainkhm/Desktop/tga_test/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ainkhm/Desktop/tga_test/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as C from '../types';\nimport { get } from '../api';\nexport var getTeamList = function getTeamList() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _yield$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: C.FETCH_TEAM_LIST\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return get('/team/getList');\n\n            case 4:\n              _yield$get = _context.sent;\n              data = _yield$get.data;\n              dispatch({\n                type: C.FINISHED_FETCH_TEAM_LIST,\n                data: data\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: C.ERROR_FETCH_TEAM_LIST,\n                error: _context.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getTeamAll = function getTeamAll() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _yield$get2, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: C.FETCH_TEAM_ALL\n              });\n              _context2.prev = 1;\n              _context2.next = 4;\n              return get('/team/getAll');\n\n            case 4:\n              _yield$get2 = _context2.sent;\n              data = _yield$get2.data;\n              dispatch({\n                type: C.FINISHED_FETCH_TEAM_ALL,\n                data: data\n              });\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              dispatch({\n                type: C.ERROR_FETCH_TEAM_ALL,\n                error: _context2.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getTeamMember = function getTeamMember(memberId) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _yield$get3, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: C.FETCH_TEAM_MEMBER\n              });\n              _context3.prev = 1;\n              _context3.next = 4;\n              return get(\"/team/member_\".concat(memberId));\n\n            case 4:\n              _yield$get3 = _context3.sent;\n              data = _yield$get3.data;\n              dispatch({\n                type: C.FINISHED_FETCH_TEAM_MEMBER,\n                data: data\n              });\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](1);\n              dispatch({\n                type: C.ERROR_FETCH_TEAM_MEMBER,\n                error: _context3.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 9]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getTeamCount = function getTeamCount() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var _yield$get4, data;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dispatch({\n                type: C.FETCH_TEAM_COUNT\n              });\n              _context4.prev = 1;\n              _context4.next = 4;\n              return get('team/count');\n\n            case 4:\n              _yield$get4 = _context4.sent;\n              data = _yield$get4.data;\n              dispatch({\n                type: C.FINISHED_FETCH_TEAM_COUNT,\n                data: data\n              });\n              _context4.next = 12;\n              break;\n\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](1);\n              dispatch({\n                type: C.ERROR_FETCH_TEAM_COUNT,\n                error: _context4.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 9]]);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/ainkhm/Desktop/tga_test/src/actions/team.js"],"names":["C","get","getTeamList","dispatch","type","FETCH_TEAM_LIST","data","FINISHED_FETCH_TEAM_LIST","ERROR_FETCH_TEAM_LIST","error","getTeamAll","FETCH_TEAM_ALL","FINISHED_FETCH_TEAM_ALL","ERROR_FETCH_TEAM_ALL","getTeamMember","memberId","FETCH_TEAM_MEMBER","FINISHED_FETCH_TEAM_MEMBER","ERROR_FETCH_TEAM_MEMBER","getTeamCount","FETCH_TEAM_COUNT","FINISHED_FETCH_TEAM_COUNT","ERROR_FETCH_TEAM_COUNT"],"mappings":"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","sourcesContent":["import * as C from '../types';\nimport { get } from '../api';\n\nexport const getTeamList = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_TEAM_LIST,\n\t});\n\ttry {\n\t\tconst { data } = await get('/team/getList');\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_TEAM_LIST,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_TEAM_LIST,\n\t\t\terror,\n\t\t});\n\t}\n};\n\nexport const getTeamAll = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_TEAM_ALL,\n\t});\n\ttry {\n\t\tconst { data } = await get('/team/getAll');\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_TEAM_ALL,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_TEAM_ALL,\n\t\t\terror,\n\t\t});\n\t}\n};\n\nexport const getTeamMember = (memberId) => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_TEAM_MEMBER,\n\t});\n\ttry {\n\t\tconst { data } = await get(`/team/member_${memberId}`);\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_TEAM_MEMBER,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_TEAM_MEMBER,\n\t\t\terror,\n\t\t});\n\t}\n};\n\nexport const getTeamCount = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: C.FETCH_TEAM_COUNT,\n\t});\n\ttry {\n\t\tconst { data } = await get('team/count');\n\t\tdispatch({\n\t\t\ttype: C.FINISHED_FETCH_TEAM_COUNT,\n\t\t\tdata,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: C.ERROR_FETCH_TEAM_COUNT,\n\t\t\terror,\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}